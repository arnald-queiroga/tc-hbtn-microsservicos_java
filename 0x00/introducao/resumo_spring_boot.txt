Spring é um ecossistema de ferramentas bem maduro e robusto no mercado, e que veio para aumentar a produtividade de desenvolvedores Java EE através de seus mais variados frameworks. O Spring Boot é um framework da família Spring que se destaca pelo ganho em produção, principalmente ao se tratar de implementações web. Sua utilização se justifica pela sua estrutura que embarca servidores HTTP, preparando toda a configuração do ambiente web, facilitando o trabalho do desenvolvedor que não precisa se preocupar com configurações trabalhosas e complexas de infraestrutura, pois a própria ferramenta já se encarrega dessa tarefa. Diversos módulos são entregues já pré-configurados, bastando que o desenvolvedor realize apenas a importação da dependência que deseja utilizar. Como por exemplo, o Java Persistence API (JPA), o Hibernate e o servidor de aplicação TomCat que já vem embutido, dentre uma gama de sub-dependências que também são oferecidas. Toda a aplicação é criada de forma bem mais confortável, simples e organizada. Há um suporte no gerenciamento de injeção de dependência através de suas annotations que trazem toda configuração por debaixo dos panos, fornecendo e instanciando adequadamente os objetos, e dividindo responsabilidade entre as camadas por ser orientado a arquitetura MVC. 
O Spring consegue estruturar muito bem a ideia de sistemas por meio de modelos arquiteturais, sobretudo o padrão MVC.

Para a adição de dependências (JPA, Hibernate, etc), o processo é simplificado e de certa forma, simples até. Para isso, é preciso adicionar as dependências desejadas no arquivo pom.xml, a partir disso o Maven se encarregará de gerenciar as dependências utilizadas para Java.

Sobre minha opnião com relação a melhor IDE para trabalhar com o Spring Boot, eu acredito que não existe bala de prata para este caso, pois todas possuem suporte para ser integrada aos recursos do SpringBoot. Por isso tenho em mente, que é uma questão bem relativa aonde cada programador possui as suas preferências. No meu uso particular, eu utilizava e gostava bastante do Eclipse, além dele, eu utilizava a IDE Eclipse STS, e a minha experiência foi a melhor possível. Aqui na C&IT, foi a primeira vez que utilizo o Intellij, e a minha impressão sobre o uso para se trabalhar com o Spring Boot também tem sido positiva. Existe também o Spring Security, que é um projeto que também faz parte do ecossistema de framework Spring, e é bastante utilizado para facilitar implementações de autenticação e autorização com a finalidade de dar mais segurança para a aplicação, contando com bibliotecas de validação como a Beans Validation já configurada e disponibilizada para uso. Para desfrutar dos recursos do Security, é necessário apenas adicionar duas dependências no arquivo de configuração do projeto, o pom.xml. A Beans Validation é especificada pelo Java, e através do pacote javax.validation.constraints, e oferece algumas annotations (isto é, comandos com funções já criadas para executar tarefas já pré definidas) que permitem validar atributos em Java. 

Em relação a definição do Spring Initializr, é um recurso que nos ajuda com a criação do projeto a partir de um template/estrutura com
configurações já pré-moldadas, além de ser uma forma universal de se criar um projeto, ou seja, ele auxilia e facilita a criação do projeto web a partir de um template, cuidando também das configurações de ambiente e bibliotecas para projetos baseados em Spring. As principais dependências para funcionamento do projeto já são importadas e organizadas em um único arquivo de maneira prática. Além de ser uma forma universal de se criar um projeto com Spring Boot, por se concentrar em praticidade, reduzindo a necessidade de pré configuração por parte do desenvolvedor.
com Spring Boot.
